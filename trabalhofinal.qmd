---
title: "Analise de sobrevivência"
subtitle: " Tempo até a ocorrência da tuberculose"
author: "Eliana, Luanna, Barbara, Maria Cecília, Sofia, Victor"
date: "02/03/2025" # Data atual
date-format: short # formatação dd/mm/aaaa
lang: pt # linguagem
toc: true # índice
number-sections: true
fig-cap-location: top # localização do título da figura 
geometry:
  - top=3cm
  - left=3cm
  - right=2cm
  - bottom=2cm
tbl-cap-location: top
df-print: kable # saída dos data frames serem kable
fig-width: 10
fig-height: 4
format: 
  html:
    self-contained: true # tornar o HTML autocontido
    theme: flatly
  pdf: 
    documentclass: scrreprt
  docx: default
editor: 
  markdown: 
    wrap: 72
editor_options:
  chunk_output_type: console
output: 
  pdf_document:
    margin: 1in
    df_print:
      digits: 3
  word_document:
    fig_caption: true
    df_print: kable
prefer-html: true
execute:
  echo: false
  warning: false
---

# Introdução

```{r}
library(dplyr)
library(tidyr)
library(survival)


library(readxl)
hiv_tuberc <- read_excel("hiv_tuberc.xlsx")

#Remove 4 NAs
hiv_tuberc2 = hiv_tuberc %>%  drop_na()



```

Os dados utilizados neste projeto referem-se a um estudo sobre o tempo até a ocorrência de doenças oportunistas em uma coorte de pacientes HIV positivos atendidos em um Hospital Universitário. As variáveis foram obtidas a partir de prontuários clínicos. Para cada paciente, registrou-se o tempo até a ocorrência de algumas doenças ou sintomatologias caracteristicamente relacionadas à imunodepressão, como candidíase, tuberculose, sinais hematológicos, herpes zoster, pneumonia por Pneumocistis.

O banco de dados é composto por 11 variáveis: nove covariáveis (oito categóricas e uma numérica), o tempo de acompanhamento e uma variável indicadora de ocorrência de tuberculose. No estudo, o tempo até a ocorrência da tuberculose foi registrado como variável resposta, com censura em casos onde as pacientes não foram acompanhadas até o surgimento da doença (Ver @tbl-tabela).




```{r}
#| tbl-cap: Descrição das variáveis utilizadas no estudo sobre tuberculose
#| label: tbl-tabela

library(knitr)
library(kableExtra)
# Criando a tabela de variáveis com duas colunas: "Variável" e "Descrição"
tabela_variaveis <- data.frame(
  Variável = c(
    "Sexo",
    "Escolaridade",
    "Idade",
    "Uso de drogas injetáveis",
    "Status da doença",
    "Tempo até a ocorrência",
    "Candidíase",
    "Sinais hematológicos",
    "Herpes zoster",
    "Pneumonia",
    "Tuberculose"
  ),
  Descrição = c(
    "1 - Masculino, 2 - Feminino.",
    "0 - Sem escolaridade, 1 - Até quatro anos de estudo, 2 - Ensino fundamental, 3 - Ensino médio, 4 - Ensino superior.",
    "Idade em anos na entrada do estudo.",
    "0 - Não, 1 - Sim.",
    "0 - Censura, 1 - Ocorrência da doença.",
    "Tempo até a ocorrência da doença Tuberculose.",
    "0 - Não, 1 - Sim.",
    "0 - Não, 1 - Sim.",
    "0 - Não, 1 - Sim.",
    "0 - Não, 1 - Sim.",
    "0 - Não, 1 - Sim."
  )
)

# Gerando a tabela formatada sem cores
kable(tabela_variaveis)

```




# Metodologia



Primeiramente, foi realizada uma análise descritiva das variáveis em estudo. Na análise de sobrevivência, essa etapa consiste em utilizar métodos não-paramétricos. Quase todas as covariáveis são dicotômicas, e, portanto, foi possível construir as estimativas de Kaplan-Meier para comparar as duas categorias. Isso foi feito para as 8 covariáveis categóricas, e também foi testada a hipótese de igualdade das duas curvas utilizando os testes de Wilcoxon e log-rank. Além disso, foi analisado se essas covariáveis atendem à suposição de riscos proporcionais.

A variável "idade" foi analisada utilizando o modelo de Cox para verificar a presença de risco proporcional. Ela também foi estratificada para análise de diferentes faixas etárias.

A próxima etapa da análise consistiu em modelar separadamente cada uma das covariáveis com a variável resposta. O objetivo dessa etapa foi selecionar as variáveis explicativas (covariáveis) que devem prosseguir para a modelagem. O critério utilizado neste trabalho foi manter as variáveis que apresentaram valores de p inferiores a 0,25 em pelo menos um dos testes de Wilcoxon e log-rank na comparação das curvas de sobrevivência.


No modelo de cox..

No modelo paramétrico, foi realizado um teste de comparação entre os modelos de gama generalizada, lognormal, Weibull e exponencial para escolher o melhor modelo que se ajustasse aos dados. Após essa análise, foi utilizado o método de backward selection para escolher o modelo final com as variáveis que mais explicam o tempo até a ocorrência da tuberculose.

Antes de proceder à interpretação das estimativas dos parâmetros do modelo ajustado, foram analisados os resíduos para confirmar a adequação do modelo final escolhido, tanto para o modelo paramétrico quanto para o semi-paramétrico.




# Resultados

## Analise Descritiva e Exploratória



```{r}
#| fig-cap: Curva de Kaplan-Meier para tuberculose
#| label: fig-fig1

# Curvas de Kaplan-Meier

km_geral <-  survfit(Surv(tempo_tuberc, status_tuberc) ~ 1, data = hiv_tuberc2)

plot(km_geral, xlab = "Dias de acompanhamento", ylab = "S(t) estimado")
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para sexo
#| label: fig-fig2

#--
km_sexo = survfit(Surv(tempo_tuberc, status_tuberc)~ sex, data = hiv_tuberc2)

plot(km_sexo, col = c("red", "blue"), xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado" )

legend("bottomright",legend = c("Feminino","Masculino"),
       col = c("red", "blue"),
       lty = 1 ,
       bty = "n")
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para escolariedade
#| label: fig-fig3

km_esc = survfit(Surv(tempo_tuberc, status_tuberc)~ esc, data = hiv_tuberc2)

plot(km_esc, col = c("red", "blue", "darkgreen", "orange", "purple"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend = c("0","1", "2", "3", "4"),
       col = c("red", "blue", "darkgreen", "orange", "purple"),
       lty = 1 ,
       bty = "n")
# Suspeita de violar o pressuposto de riscos proporcionais




cox.zph(coxph(Surv(tempo_tuberc, status_tuberc) ~ esc, data = hiv_tuberc2))

# Não viola
#--
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para Uso de drogas injetáveis
#| label: fig-fig4

km_udi = survfit(Surv(tempo_tuberc, status_tuberc)~ udi, data = hiv_tuberc2)

plot(km_udi, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")
legend("bottomright",legend = c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
# Suspeita de violar o pressuposto de riscos proporcionais

cox.zph(coxph(Surv(tempo_tuberc, status_tuberc) ~ udi, data = hiv_tuberc2))

# Não viola
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para sexual
#| label: fig-fig5

#--
km_sexual = survfit(Surv(tempo_tuberc, status_tuberc)~ sexual, data = hiv_tuberc2)

plot(km_sexual, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend =  c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para Candidíase
#| label: fig-fig6


km_candida = survfit(Surv(tempo_tuberc, status_tuberc)~ candida, data = hiv_tuberc2)

plot(km_candida, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend =  c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
```


```{r}

#| fig-cap: Curvas de Kaplan-Meier para Sinais hematológicos
#| label: fig-fig7

km_hemato = survfit(Surv(tempo_tuberc, status_tuberc)~ hemato, data = hiv_tuberc2)

plot(km_hemato, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend =  c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para herpes
#| label: fig-fig8


km_herpes = survfit(Surv(tempo_tuberc, status_tuberc)~ herpes, data = hiv_tuberc2)

plot(km_herpes, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend = c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
```


```{r}
#| fig-cap: Curvas de Kaplan-Meier para Pneumonia 
#| label: fig-fig9

km_pneumo = survfit(Surv(tempo_tuberc, status_tuberc)~ pneumo, data = hiv_tuberc2)

plot(km_pneumo, col = c("blue", "darkgreen"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend =  c("Não","Sim"),
       col = c( "blue", "darkgreen"),
       lty = 1 ,
       bty = "n")
```



```{r}
#| fig-cap: Curvas de Kaplan-Meier para idade
#| label: fig-fig10

 
#modelagem de cox estratificada

# teste de pressuposto para a varivavel continua

cox.zph(coxph(Surv(tempo_tuberc, status_tuberc) ~ idade, data = hiv_tuberc2))

# Viola o pressuposto de riscos proporcionais
```

```{r}
#| fig-cap: Curvas de Kaplan-Meier para idade estratificada
#| label: fig-fig11


hiv_tuberc2$faixa_idade <- cut(hiv_tuberc2$idade, breaks = c(0, 30, 40, 50, 60, Inf), 
                               labels = c("≤30", "31-40", "41-50", "51-60", ">60"))

km_idade = survfit(Surv(tempo_tuberc, status_tuberc)~ factor(faixa_idade) , data = hiv_tuberc2)



plot(km_idade , col = c("red", "blue", "darkgreen", "orange", "purple"),
     xlab = "Dias de acompanhamento",
     ylab = "S(t) estimado")

legend("bottomright",legend = c("≤30", "31-40", "41-50", "51-60", ">60"),
       col = c("red", "blue", "darkgreen", "orange", "purple"),
       lty = 1 ,
       bty = "n")
# Suspeita de violar o pressuposto de riscos proporcionais




cox.zph(coxph(Surv(tempo_tuberc, status_tuberc) ~ faixa_idade, data = hiv_tuberc2))

# Não viola
```

```{r}
# Carregar pacotes necessários
library(survival)
library(survminer)
library(dplyr)
library(kableExtra)

# Lista de variáveis do modelo (exceto 'tempo_tuberc' e 

variaveis <- c("sex", "esc", "udi", "sexual", "candida", "herpes", "pneumo", "hemato", "faixa_idade","idade")

# Criar uma lista para armazenar os resultados
resultados <- data.frame(Covariável = character(),
                         Logrank = character(),
                         Wilcoxon = character(),
                         stringsAsFactors = FALSE)

# Loop para calcular os testes de Logrank e Wilcoxon para cada variável
for (var in variaveis) {
  # Criar o modelo Kaplan-Meier para a variável categórica
  fit_km <- survfit(Surv(tempo_tuberc, status_tuberc) ~ get(var), data = hiv_tuberc2)
  
  # Testes de sobrevivência
  logrank_test <- survdiff(Surv(tempo_tuberc, status_tuberc) ~ get(var), data = hiv_tuberc2, rho = 0)
  wilcoxon_test <- survdiff(Surv(tempo_tuberc, status_tuberc) ~ get(var), data = hiv_tuberc2, rho = 1)
  
  # Extraindo estatísticas e valores p
  logrank_chisq <- round(logrank_test$chisq, 2)
  logrank_p <- round(1 - pchisq(logrank_test$chisq, df = length(logrank_test$n) - 1), 3)
  
  wilcoxon_chisq <- round(wilcoxon_test$chisq, 2)
  wilcoxon_p <- round(1 - pchisq(wilcoxon_test$chisq, df = length(wilcoxon_test$n) - 1), 3)
  
  # Formatar valores na mesma estrutura desejada
  logrank_valor <- paste0(logrank_chisq, " (", logrank_p, ")")
  wilcoxon_valor <- paste0(wilcoxon_chisq, " (", wilcoxon_p, ")")
  
  # Adicionar à tabela de resultados
  resultados <- rbind(resultados, data.frame(Covariável = var,
                                             Logrank = logrank_valor,
                                             Wilcoxon = wilcoxon_valor))
}
```

```{r}
# Renomear as covariáveis para nomes mais descritivos
resultados$Covariável <- gsub("sex", "Sexo", resultados$Covariável)
resultados$Covariável <- gsub("esc", "Escolaridade", resultados$Covariável)
resultados$Covariável <- gsub("udi", "Uso de Drogas Injetáveis", resultados$Covariável)
resultados$Covariável <- gsub("sexual", "Orientação Sexual", resultados$Covariável)
resultados$Covariável <- gsub("candida", "Candidíase", resultados$Covariável)
resultados$Covariável <- gsub("herpes", "Herpes Zoster", resultados$Covariável)
resultados$Covariável <- gsub("pneumo", "Pneumonia Pneumocystis", resultados$Covariável)
resultados$Covariável <- gsub("hemato", "Sinais Hematológicos", resultados$Covariável)
resultados$Covariável <- gsub("faixa_idade", "Faixa Etária", resultados$Covariável)
resultados$Covariável <- gsub("idade", "Idade", resultados$Covariável)


```


```{r}
#| fig-cap: "Testes logrank e de Wilcoxon para igualdade das curvas de sobrevivência."
#| label: fig-fig12
# Criar tabela formatada
resultados %>%
  kable(
    col.names = c("Covariável", "Logrank (valor p)", "Wilcoxon (valor p)"),
    align = "lcc") %>%
  kable_styling(full_width = FALSE, position = "center") 

```


## Modelo de cox


```{r}
fit<- coxph(Surv(tempo_tuberc, status_tuberc)~ 
                     factor(sex)  +factor(faixa_idade) +
                
                     factor(candida) + factor(herpes) + 
                     factor(pneumo)+ factor(hemato), method="breslow", data=hiv_tuberc2)
summary(fit)
```


```{r}


fit_final <- coxph(Surv(tempo_tuberc, status_tuberc)~ 
                     factor(sex) +
                     factor(candida) + factor(herpes) + 
                     factor(pneumo)+ factor(hemato), method="breslow", data=hiv_tuberc2)
summary(fit_final)

```
```{r}


# Seleção backward usando stepAIC
library(MASS)
fit_cox<- stepAIC(fit, direction = "backward")

# Exibir o modelo final
summary(fit_cox)

```

### Adequação do Modelo

## Modelo Parametrico
```{r}

fit_exp <- survreg(Surv(tempo_tuberc, status_tuberc)~ 
                     factor(sex) +  factor(faixa_idade ) +
          
                     factor(candida) + factor(herpes) + 
                     factor(pneumo)+ factor(hemato),dist='exponential', data= hiv_tuberc2)



fit_weibull <- survreg(Surv(tempo_tuberc, status_tuberc)~ 
                     factor(sex) +  factor(faixa_idade ) +
          
                     factor(candida) + factor(herpes) + 
                     factor(pneumo)+ factor(hemato), 
                        dist = 'weibull', data = hiv_tuberc2)




fit_lognormal <-survreg(Surv(tempo_tuberc, status_tuberc)~ 
                     factor(sex) +  factor(faixa_idade ) +
          
                     factor(candida) + factor(herpes) + 
                     factor(pneumo)+ factor(hemato), 
                        dist='lognormal', data = hiv_tuberc2)


library(flexsurv)
fit_ggamma <- flexsurvreg(Surv(tempo_tuberc, status_tuberc) ~ 
                          factor(sex) +  factor(faixa_idade) +
                          factor(candida) + factor(herpes) + 
                          factor(pneumo) + factor(hemato), 
                          data = hiv_tuberc2,
                          dist = "gengamma")


```


```{r}
# Extraindo log-verossimilhança
logLik_ggamma <- fit_ggamma$loglik
logLik_weibull <- logLik(fit_weibull)
logLik_lognormal <- logLik(fit_lognormal)
logLik_exp <- logLik(fit_exp)

# Teste de Razão de Verossimilhança (TRV) comparando a Gama Generalizada com os outros modelos
trv_ggamma_weibull <- 2 * (as.numeric(logLik_ggamma) - as.numeric(logLik_weibull))
trv_ggamma_lognormal <- 2 * (as.numeric(logLik_ggamma) - as.numeric(logLik_lognormal))
trv_ggamma_exp <- 2 * (as.numeric(logLik_ggamma) - as.numeric(logLik_exp))

# Graus de liberdade (diferença no número de parâmetros entre os modelos)
df_ggamma_weibull <- length(coef(fit_ggamma)) - length(coef(fit_weibull))
df_ggamma_lognormal <- length(coef(fit_ggamma)) - length(coef(fit_lognormal))
df_ggamma_exp <- length(coef(fit_ggamma)) - length(coef(fit_exp))

# Valores-p para os testes (Qui-quadrado)
pval_ggamma_weibull <- pchisq(trv_ggamma_weibull, df_ggamma_weibull, lower.tail = FALSE)
pval_ggamma_lognormal <- pchisq(trv_ggamma_lognormal, df_ggamma_lognormal, lower.tail = FALSE)
pval_ggamma_exp <- pchisq(trv_ggamma_exp, df_ggamma_exp, lower.tail = FALSE)
```


```{r}
# Criando a tabela com os resultados
tabela_trv <- tibble::tibble(
  Comparação = c("Weibull", 
                 " Lognormal", 
                 " Exponencial"),
  TRV = c(trv_ggamma_weibull, trv_ggamma_lognormal, trv_ggamma_exp),
  GL = c(df_ggamma_weibull, df_ggamma_lognormal, df_ggamma_exp),
  `Valor-p` = c(pval_ggamma_weibull, pval_ggamma_lognormal, pval_ggamma_exp)
)

# Exibir tabela formatada
kable(tabela_trv)

```

O melhor modelo é lognormal
```{r}
summary(fit_lognormal)
```


### Selecão de Melhor Modelo

```{r}


# Seleção backward usando stepAIC
library(MASS)
fit_lognormal_backward <- stepAIC(fit_lognormal, direction = "backward")

# Exibir o modelo final
summary(fit_lognormal_backward)

```

```{r}
# Estimativa do tempo mediano (onde a probabilidade de sobrevivência é 50%)
tempo_mediano <- exp(coef(fit_lognormal_backward)["(Intercept)"])  # ou outro coeficiente, dependendo do modelo
tempo_mediano

```


```{r}
# Calculando a taxa de falha (hazard rate) usando o modelo ajustado
taxa_falha <- exp(coef(fit_lognormal_backward)["(Intercept)"])  # Usando o coeficiente relevante para a variável de interesse
taxa_falha

```

### Adequação do modelo
```{r}



```



# Conclusão
